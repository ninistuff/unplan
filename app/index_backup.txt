// app/index.tsximport React, { useEffect, useRef, useState } from "react";import { Link } from "expo-router";import {  Pressable,  Text,  View,  ScrollView,  LayoutChangeEvent,  GestureResponderEvent,  PanResponder,  PanResponderInstance,  Platform,  Animated,} from "react-native";import { useWeather } from "../hooks/useWeather";import WeatherAvatar from "./components/WeatherAvatar";import { buildWeatherMessage } from "../utils/weatherMessage";type Transport = "walk" | "public" | "car" | "bike";type WithWho = "solo" | "friends" | "pet" | "family" | "partner";function clamp(n: number, a: number, b: number) {  return Math.max(a, Math.min(b, n));}function roundToStep(n: number, step: number) {  return Math.round(n / (step || 1)) * (step || 1);}function q(v: any) {  return v === true ? "1" : v === false ? "0" : String(v);}function formatHM(mins: number) {  const h = Math.floor(mins / 60);  const m = mins % 60;  return h > 0 ? `${h}h ${m > 0 ? m + "min" : ""}`.trim() : `${m}min`;}type SliderProps = {  min: number;  max: number;  step?: number;  value: number;  onChange: (v: number) => void;  disabled?: boolean;  markers?: Array<{ value: number; label: string }>;};function Slider({ min, max, step = 1, value, onChange, disabled, markers }: SliderProps) {  const [width, setWidth] = useState(0);  const pos = useRef(new Animated.Value(0)).current;  const lastVal = useRef<number>(value);  const thumbSize = 30;  const valueToPx = (val: number, w: number) => clamp((val - min) / (max - min), 0, 1) * Math.max(w, 1);  const pxToValue = (px: number, w: number) => min + clamp(px / Math.max(w, 1), 0, 1) * (max - min);  useEffect(() => {    const px = valueToPx(value, width);    pos.setValue(px);    lastVal.current = value;  }, [width, value]);  const onLayout = (e: LayoutChangeEvent) => setWidth(e.nativeEvent.layout.width);  const animateToPx = (px: number, dur = 120) => {    Animated.timing(pos, { toValue: px, duration: dur, useNativeDriver: false }).start();  };  const handlePress = (e: GestureResponderEvent) => {    if (disabled) return;    const anyEvt: any = e;    const x = clamp(anyEvt?.nativeEvent?.locationX ?? 0, 0, Math.max(width, 1));    const val = clamp(roundToStep(pxToValue(x, width), step), min, max);    animateToPx(valueToPx(val, width));    if (val !== lastVal.current) {      lastVal.current = val;      onChange(val);    }  };  const startX = useRef(0);  const pan: PanResponderInstance = useRef(    PanResponder.create({      onStartShouldSetPanResponder: () => !disabled,      onMoveShouldSetPanResponder: () => !disabled,      onPanResponderGrant: () => {        pos.stopAnimation((cur) => {          startX.current = cur as number;        });      },      onPanResponderMove: (_evt, gs) => {        if (disabled) return;        const nx = clamp(startX.current + gs.dx, 0, Math.max(width, 1));        pos.setValue(nx);        const val = clamp(roundToStep(pxToValue(nx, width), step), min, max);        if (val !== lastVal.current) {          lastVal.current = val;          onChange(val);        }      },      onPanResponderRelease: () => {        const snappedPx = valueToPx(lastVal.current, width);        animateToPx(snappedPx, 100);      },    })  ).current;  const trackFill = pos.interpolate({ inputRange: [0, Math.max(width, 1)], outputRange: [0, Math.max(width, 1)], extrapolate: 'clamp' });  return (    <View onLayout={onLayout} style={{ width: "100%", paddingVertical: 8 }}>      <Pressable onPressIn={handlePress} disabled={disabled}>        <View style={{ height: 12, backgroundColor: "#e5e7eb", borderRadius: 9999 }}>          <Animated.View style={{ width: trackFill, height: 12, backgroundColor: disabled ? "#9ca3af" : "#2563eb", borderRadius: 9999 }} />        </View>      </Pressable>      <Animated.View        {...pan.panHandlers}        style={{          position: "absolute",          left: Animated.subtract(pos, thumbSize / 2),          top: 12 / 2 - thumbSize / 2 + 8,          width: thumbSize,          height: thumbSize,          borderRadius: thumbSize / 2,          backgroundColor: "#fff",          borderWidth: 2,          borderColor: disabled ? "#9ca3af" : "#2563eb",          elevation: 2,        }}      />      {markers && markers.length > 0 && (        <View style={{ flexDirection: "row", justifyContent: "space-between", marginTop: 6 }}>          {markers.map((m) => (            <Text key={m.value} style={{ fontSize: 12, color: "#6b7280" }}>              {m.label}            </Text>          ))}        </View>      )}    </View>  );}function Chip({ label, active, onPress, disabled }: { label: string; active?: boolean; onPress?: () => void; disabled?: boolean }) {  return (    <Pressable      onPress={disabled ? undefined : onPress}      style={{        paddingHorizontal: 14,        paddingVertical: 10,        borderRadius: 10,        backgroundColor: active ? "#111" : "#eee",        borderWidth: 1,        borderColor: active ? "#111" : "#ddd",        marginRight: 8,        marginBottom: 8,        opacity: disabled ? 0.5 : 1,      }}    >      <Text style={{ color: active ? "#fff" : "#111", fontWeight: "600" }}>{label}</Text>    </Pressable>  );}function OptionCard({ title, icon, active, onPress }: { title: string; icon: string; active?: boolean; onPress?: () => void }) {  return (    <Pressable      onPress={onPress}      style={{        width: "48%",        marginHorizontal: "1%",        marginBottom: 8,        backgroundColor: active ? "#eef3ff" : "#fff",        borderRadius: 16,        borderWidth: 1,        borderColor: active ? "#2563eb" : "#e5e7eb",        padding: 16,        elevation: Platform.OS === "android" ? 1 : 0,      }}    >      <Text style={{ fontSize: 24, marginBottom: 6 }}>{icon}</Text>      <Text style={{ fontSize: 14, fontWeight: "700" }}>{title}</Text>    </Pressable>  );}const transportOptions: Array<{ key: Transport; title: string; icon: string }> = [  { key: "walk", title: "Pe jos", icon: "🦶" },  { key: "public", title: "Transport public", icon: "🚌" },  { key: "car", title: "Mașina", icon: "🚗" },  { key: "bike", title: "Bicicletă/Trotineta", icon: "🚲" },];const withOptions: Array<{ key: WithWho; title: string; icon: string }> = [  { key: "solo", title: "Singur", icon: "🧑" },  { key: "friends", title: "Cu prietenii", icon: "🧑‍🤝‍🧑" },  { key: "pet", title: "Cu animalul", icon: "🐶" },  { key: "family", title: "Cu familia", icon: "👨‍👩‍👧‍👦" },  { key: "partner", title: "Cu iubitul/a", icon: "💞" },];export default function Home() {  const weather = useWeather();  const hour = new Date().getHours();  const weekday = new Date().getDay(); // 0=Sun  const insets = useSafeAreaInsets();  // State  const [duration, setDuration] = useState(60);  const [transport, setTransport] = useState<Transport>("walk");  const [budget, setBudget] = useState(200);  const [budgetInfinite, setBudgetInfinite] = useState(false);  const [withWho, setWithWho] = useState<WithWho>("solo");  const [friendsCount, setFriendsCount] = useState(2);  const [friendsExpat, setFriendsExpat] = useState(false);  const [friendsDisabilities, setFriendsDisabilities] = useState(false);  const [petType, setPetType] = useState<"dog" | "cat">("dog");  const [familyParents, setFamilyParents] = useState(false);  const [familyGrandparents, setFamilyGrandparents] = useState(false);  const [familyDisabilities, setFamilyDisabilities] = useState(false);  const [childAge, setChildAge] = useState(0);  if (!weather) {    return (      <View style={{ flex: 1, alignItems: "center", justifyContent: "center" }}>        <Text>Se încarcă vremea…</Text>      </View>    );  }  const msg = buildWeatherMessage(    Math.round(weather.temperature),    weather.condition as any,    hour,    weekday  );  // Query params  const baseParams = (() => {    const parts: string[] = [];    parts.push(`d=${q(duration)}`);    parts.push(`t=${q(transport)}`);    parts.push(`b=${budgetInfinite ? "inf" : q(budget)}`);    parts.push(`w=${q(withWho)}`);    if (withWho === "friends") {      parts.push(`fc=${q(friendsCount)}`);      parts.push(`fx=${q(friendsExpat)}`);      parts.push(`fd=${q(friendsDisabilities)}`);    } else if (withWho === "pet") {      parts.push(`pt=${q(petType)}`);    } else if (withWho === "family") {      parts.push(`fp=${q(familyParents)}`);      parts.push(`fg=${q(familyGrandparents)}`);      parts.push(`fa=${q(familyDisabilities)}`);      parts.push(`ca=${q(childAge)}`);    }    return parts.join("&");  })();  return (    <View style={{ flex: 1 }}>      {/* Header */}      <View        style={{          paddingHorizontal: 16,          paddingVertical: 14,          backgroundColor: "#111",          flexDirection: "row",          alignItems: "center",        }}      >        <WeatherAvatar tempC={weather.temperature} condition={weather.condition as any} size={56} />        <View style={{ flex: 1, marginLeft: 12 }}>          <Text style={{ color: "#fff", fontSize: 18, fontWeight: "700" }} numberOfLines={1} ellipsizeMode="tail">            {weather.city} • {Math.round(weather.temperature)}°C, {weather.condition}          </Text>          <Text style={{ color: "#ccc", fontSize: 14, lineHeight: 20 }} numberOfLines={2}>            {msg}          </Text>        </View>      </View>      {/* Content */}      <ScrollView contentContainerStyle={{ padding: 16, gap: 16, paddingBottom: 32 }}>        {/* Cât timp ai? */}        <View style={{ backgroundColor: "#fff", borderRadius: 16, padding: 16, borderWidth: 1, borderColor: "#e5e7eb", elevation: Platform.OS === "android" ? 1 : 0 }}>          <View style={{ flexDirection: "row", justifyContent: "space-between", alignItems: "center", marginBottom: 8 }}>            <Text style={{ fontSize: 20, fontWeight: "700", color: "#0f172a" }}>Cât timp ai?</Text>            <Text style={{ fontSize: 16, fontWeight: "700", color: "#0f172a" }}>{formatHM(duration)}</Text>          </View>          <Slider            min={30}            max={1440}            step={15}            value={duration}            onChange={setDuration}            markers={[{ value: 30, label: "30min" }, { value: 120, label: "2h" }, { value: 360, label: "6h" }, { value: 720, label: "12h" }, { value: 1440, label: "24h" }]}          />        </View>        {/* Cu ce mergi? */}        <View style={{ backgroundColor: "#fff", borderRadius: 16, padding: 16, borderWidth: 1, borderColor: "#e5e7eb", elevation: Platform.OS === "android" ? 1 : 0 }}>          <Text style={{ fontSize: 20, fontWeight: "700", color: "#0f172a", marginBottom: 8 }}>Cu ce mergi?</Text>          <View style={{ flexDirection: "row", flexWrap: "wrap", marginHorizontal: -6 }}>            {transportOptions.map((opt) => (              <OptionCard key={opt.key} title={opt.title} icon={opt.icon} active={transport === opt.key} onPress={() => setTransport(opt.key)} />            ))}          </View>        </View>        {/* Ce buget ai? */}        <View style={{ backgroundColor: "#fff", borderRadius: 16, padding: 16, borderWidth: 1, borderColor: "#e5e7eb", elevation: Platform.OS === "android" ? 1 : 0 }}>          <View style={{ flexDirection: "row", justifyContent: "space-between", alignItems: "center", marginBottom: 8 }}>            <Text style={{ fontSize: 20, fontWeight: "700", color: "#0f172a" }}>Ce buget ai?</Text>            <Text style={{ fontSize: 16, fontWeight: "700", color: "#0f172a" }}>{budgetInfinite ? "∞" : `${budget} lei`}</Text>          </View>          <View style={{ flexDirection: "row", alignItems: "center", marginBottom: 8 }}>            <Chip label="∞" active={!!budgetInfinite} onPress={() => setBudgetInfinite(!budgetInfinite)} />          </View>          <View style={{ opacity: budgetInfinite ? 0.4 : 1 }} pointerEvents={budgetInfinite ? ("none" as any) : ("auto" as any)}>            <Slider              min={0}              max={900}              step={10}              value={budget}              onChange={setBudget}              markers={[{ value: 0, label: "0" }, { value: 200, label: "200" }, { value: 500, label: "500" }, { value: 900, label: "900" }, { value: 1000, label: "∞" }]}            />          </View>        </View>        {/* Cu cine? */}        <View style={{ backgroundColor: "#fff", borderRadius: 16, padding: 16, borderWidth: 1, borderColor: "#e5e7eb", elevation: Platform.OS === "android" ? 1 : 0 }}>          <Text style={{ fontSize: 20, fontWeight: "700", color: "#0f172a", marginBottom: 8 }}>Cu cine?</Text>          <View style={{ flexDirection: "row", flexWrap: "wrap", marginHorizontal: -6 }}>            {withOptions.map((opt) => (              <OptionCard key={opt.key} title={opt.title} icon={opt.icon} active={withWho === opt.key} onPress={() => setWithWho(opt.key as WithWho)} />            ))}          </View>          {withWho === "friends" && (            <View style={{ marginTop: 8 }}>              <Text style={{ fontWeight: "600", marginBottom: 6 }}>Câți prieteni</Text>              <Slider min={1} max={10} step={1} value={friendsCount} onChange={setFriendsCount} />              <Text style={{ fontSize: 12, color: "#111", marginTop: 4 }}>{friendsCount === 10 ? "10+" : friendsCount}</Text>              <View style={{ flexDirection: "row", marginTop: 8 }}>                <Chip label="Expat" active={friendsExpat} onPress={() => setFriendsExpat(!friendsExpat)} />                <Chip label="Dizabilități" active={friendsDisabilities} onPress={() => setFriendsDisabilities(!friendsDisabilities)} />              </View>            </View>          )}          {withWho === "pet" && (            <View style={{ marginTop: 8 }}>              <Text style={{ fontWeight: "600", marginBottom: 6 }}>Animal</Text>              <View style={{ flexDirection: "row" }}>                <Chip label="Câine" active={petType === "dog"} onPress={() => setPetType("dog")} />                <Chip label="Pisică" active={petType === "cat"} onPress={() => setPetType("cat")} />              </View>            </View>          )}          {withWho === "family" && (            <View style={{ marginTop: 8 }}>              <Text style={{ fontWeight: "600", marginBottom: 6 }}>Preferințe</Text>              <View style={{ flexDirection: "row", flexWrap: "wrap" }}>                <Chip label="Părinți" active={familyParents} onPress={() => setFamilyParents(!familyParents)} />                <Chip label="Bunici" active={familyGrandparents} onPress={() => setFamilyGrandparents(!familyGrandparents)} />                <Chip label="Dizabilități" active={familyDisabilities} onPress={() => setFamilyDisabilities(!familyDisabilities)} />              </View>              <Text style={{ fontWeight: "600", marginTop: 12 }}>Vârsta copil</Text>              <Slider min={0} max={17} step={1} value={childAge} onChange={setChildAge} />              <Text style={{ fontSize: 12, color: "#111", marginTop: 4 }}>{childAge === 0 ? "fără copii" : `${childAge} ani`}</Text>            </View>          )}        </View>      </ScrollView>      {/* Sticky footer */}      <View        style={{          position: "absolute",          left: 0,          right: 0,          bottom: 0,          padding: 16,          paddingBottom: Math.max(12, insets.bottom),          backgroundColor: "transparent",        }}      >        <View style={{ maxWidth: 520, width: "100%", alignSelf: "center" }}>          <Link href={`/results?${baseParams}`} asChild>            <Pressable style={{ backgroundColor: "#2563eb", paddingVertical: 14, borderRadius: 12, alignItems: "center", marginBottom: 8 }}>              <Text style={{ color: "#fff", fontWeight: "700", fontSize: 16 }}>Let’s go!</Text>            </Pressable>          </Link>          <Link href={`/results?${baseParams}&shuffle=1`} asChild>            <Pressable style={{ backgroundColor: "transparent", paddingVertical: 14, borderRadius: 12, alignItems: "center", borderWidth: 1, borderColor: "#ddd" }}>              <Text style={{ color: "#111", fontWeight: "700", fontSize: 16 }}>Surprinde-mă</Text>            </Pressable>          </Link>        </View>      </View>    </View>  );}